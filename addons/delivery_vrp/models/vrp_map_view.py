# models/vrp_map_view.py - VERSION FINALE CORRIG√âE
import logging
from odoo import models, fields, api
import json

_logger = logging.getLogger(__name__)

class VRPMapView(models.TransientModel):
    _name = 'vrp.map.view'
    _description = 'VRP Map Viewer - FINAL'

    vehicles_data = fields.Text('Vehicles Data', help="Donn√©es JSON des v√©hicules et itin√©raires")

    @api.model
    def default_get(self, fields_list):
        """R√©cup√©ration s√©curis√©e des donn√©es par d√©faut"""
        _logger.info("=== VRP MAP VIEW DEFAULT_GET FINAL ===")
        _logger.info(f"Fields demand√©s: {fields_list}")
        
        result = super().default_get(fields_list)
        
        # V√©rifier si des donn√©es sont pass√©es dans le contexte
        context_data = self.env.context.get('default_vehicles_data')
        
        if context_data:
            _logger.info(f"Donn√©es context trouv√©es: {type(context_data)}")
            
            if isinstance(context_data, list):
                # ‚úÖ Toujours s√©rialiser une liste Python
                result['vehicles_data'] = json.dumps(context_data, ensure_ascii=False)
                _logger.info(f"Liste context s√©rialis√©e: {len(context_data)} √©l√©ments")
            
            elif isinstance(context_data, str):
                # V√©rifier que c'est du JSON valide
                try:
                    parsed = json.loads(context_data)
                    if isinstance(parsed, list):
                        # ‚úÖ On re-dumps pour √©viter les cha√Ænes doublement s√©rialis√©es
                        result['vehicles_data'] = json.dumps(parsed, ensure_ascii=False)
                        _logger.info("String JSON valide reformat√©e en liste")
                    else:
                        _logger.error(f"Context string JSON ne contient pas une liste: {type(parsed)}")
                        result['vehicles_data'] = '[]'
                except json.JSONDecodeError:
                    _logger.error("Context string n'est pas du JSON valide")
                    result['vehicles_data'] = '[]'
            
            else:
                _logger.warning(f"Type de donn√©es context non support√©: {type(context_data)}")
                result['vehicles_data'] = '[]'
        
        else:
            _logger.info("Aucune donn√©e context, utilisation par d√©faut")
            result['vehicles_data'] = '[]'
        
        return result

    @api.model
    def create(self, vals):
        """Surcharge pour validation et debugging"""
        _logger.info(f"=== CR√âATION VRP MAP VIEW FINALE ===")
        vehicles_data_input = vals.get('vehicles_data', '[]')
        _logger.info(f"Type d'entr√©e: {type(vehicles_data_input)}")
        _logger.info(f"Contenu (100 premiers chars): {str(vehicles_data_input)[:100]}...")
        
        try:
            if isinstance(vehicles_data_input, str):
                # ‚úÖ Tenter de parser la cha√Æne
                vehicles_data = json.loads(vehicles_data_input)
                if isinstance(vehicles_data, list):
                    vals['vehicles_data'] = json.dumps(vehicles_data, ensure_ascii=False)
                    _logger.info(f"‚úÖ String JSON valide avec {len(vehicles_data)} v√©hicules")
                else:
                    _logger.error(f"JSON pars√© n'est pas une liste: {type(vehicles_data)}")
                    vals['vehicles_data'] = '[]'
            
            elif isinstance(vehicles_data_input, list):
                # ‚úÖ D√©j√† une liste Python
                vals['vehicles_data'] = json.dumps(vehicles_data_input, ensure_ascii=False)
                _logger.info(f"‚úÖ Liste Python s√©rialis√©e avec {len(vehicles_data_input)} v√©hicules")
            
            else:
                _logger.error(f"Type de donn√©es non support√©: {type(vehicles_data_input)}")
                vals['vehicles_data'] = '[]'
                
        except json.JSONDecodeError as e:
            _logger.error(f"‚ùå Erreur parsing JSON: {e}")
            vals['vehicles_data'] = '[]'
        except Exception as e:
            _logger.error(f"‚ùå Erreur inattendue: {e}")
            vals['vehicles_data'] = '[]'
        
        # Cr√©er l'enregistrement
        record = super().create(vals)
        
        # V√©rification finale
        try:
            final_data = json.loads(record.vehicles_data)
            _logger.info(f"‚úÖ Enregistrement cr√©√© - ID: {record.id}")
            _logger.info(f"Donn√©es finales: {len(final_data)} v√©hicules stock√©s")
            
            # Debug d√©taill√©
            for i, vehicle in enumerate(final_data):
                waypoints_count = len(vehicle.get('waypoints', []))
                _logger.info(f"  V√©hicule {i}: {vehicle.get('vehicle_name', 'N/A')} - {waypoints_count} waypoints")
                
        except Exception as e:
            _logger.error(f"‚ùå Erreur v√©rification finale: {e}")
        
        return record


    """

## üìù Explication ligne par ligne

### 1. `from odoo import models, fields, api`

* **`odoo`** : c‚Äôest le framework ERP (Enterprise Resource Planning) sur lequel ce module est construit.
* **`models`** : permet de cr√©er des classes qui repr√©sentent des mod√®les de donn√©es (√©quivalent de tables dans une base de donn√©es).
* **`fields`** : sert √† d√©finir des **champs** (colonnes de la base de donn√©es).
  Exemple : `fields.Text('Vehicles Data')` ‚Üí un champ texte pour stocker des donn√©es.
* **`api`** : contient des d√©corateurs comme `@api.model`, `@api.multi`, `@api.depends` qui d√©finissent le comportement des m√©thodes.

---

### 2. `import json`

* **`json`** : c‚Äôest une librairie Python standard qui permet de **convertir** entre :

  * un objet Python (liste, dictionnaire, etc.)
  * une cha√Æne de caract√®res au format JSON (utilis√© pour √©changer des donn√©es entre programmes).

Exemple :

```python
import json
data = {"nom": "Ali", "age": 25}
texte = json.dumps(data)   # Convertit en string JSON
print(texte)   # {"nom": "Ali", "age": 25}
```

---

### 3. `class VRPMapView(models.TransientModel):`

* **`TransientModel`** : mod√®le temporaire dans Odoo.
  Contrairement √† `models.Model` (qui stocke en base de donn√©es de mani√®re permanente), `TransientModel` est utilis√© pour des donn√©es temporaires (souvent dans des assistants/wizards).

---

### 4. `vehicles_data = fields.Text('Vehicles Data')`

* D√©finition d‚Äôun champ `vehicles_data` de type texte.
* `'Vehicles Data'` est juste le **libell√©** qui appara√Ætra dans l‚Äôinterface.

---

### 5. `@api.model`

* **D√©corateur** qui indique que la m√©thode ne d√©pend pas d‚Äôun enregistrement particulier.
* En gros, c‚Äôest une m√©thode **de classe** qui agit au niveau global.

---

### 6. `def default_get(self, fields_list):`

* **`default_get`** : m√©thode sp√©ciale d‚ÄôOdoo appel√©e lorsqu‚Äôon ouvre un formulaire pour **pr√©-remplir les champs par d√©faut**.
* **`fields_list`** : liste des champs √† initialiser (envoy√©e automatiquement par Odoo).

---

### 7. `result = super().default_get(fields_list)`

* **`super()`** : permet d‚Äôappeler la version **parente** de la m√©thode.
  Ici, √ßa appelle `default_get` d√©fini dans `models.TransientModel`.
* Comme √ßa, tu gardes le comportement de base d‚ÄôOdoo, et tu peux ajouter ton propre traitement **par-dessus**.

---

### 8. `vehicles_data = self.env.context.get('default_vehicles_data', [])`

* **`self.env`** : environnement d‚Äôex√©cution dans Odoo, qui contient :

  * `self.env.user` ‚Üí l‚Äôutilisateur connect√©
  * `self.env.company` ‚Üí la soci√©t√© courante
  * `self.env.context` ‚Üí le contexte courant
* **`context`** : c‚Äôest un dictionnaire (cl√© ‚Üí valeur) qui transporte des informations temporaires entre les m√©thodes.
* **`.get('default_vehicles_data', [])`** :

  * `.get(cl√©, valeur_par_d√©faut)` ‚Üí permet de r√©cup√©rer une valeur depuis le dictionnaire.
  * Ici, on cherche la cl√© `'default_vehicles_data'`.
  * Si elle n‚Äôexiste pas, on retourne `[]` (une liste vide).

üëâ √áa permet donc de r√©cup√©rer la liste des v√©hicules pass√©e par le contexte, ou sinon mettre une liste vide par d√©faut.

---

### 9. `result['vehicles_data'] = json.dumps(vehicles_data)`

* `json.dumps(objet_python)` ‚Üí convertit un objet Python (ici une liste `vehicles_data`) en **cha√Æne JSON**.
* Pourquoi ? Parce que `vehicles_data` est un champ **Texte** dans Odoo, et il ne peut stocker que du texte (string), pas une liste Python directement.

Exemple :

```python
vehicles_data = [{"id": 1, "name": "Camion A"}, {"id": 2, "name": "Camion B"}]
json.dumps(vehicles_data)
# R√©sultat: '[{"id": 1, "name": "Camion A"}, {"id": 2, "name": "Camion B"}]'
```

"""