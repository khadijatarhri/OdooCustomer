"""delivery_vrp/models/vrp_map_view.py"""


# models/vrp_map_view.py
from odoo import models, fields, api
import json
import logging

_logger = logging.getLogger(__name__)

class VRPMapView(models.TransientModel):
    _name = 'vrp.map.view'
    _description = 'VRP Map Viewer'

    vehicles_data = fields.Text('Vehicles Data', help="Donn√©es JSON des v√©hicules et itin√©raires")

    @api.model
    def default_get(self, fields_list):
        """R√©cup√©rer les donn√©es par d√©faut depuis le contexte"""
        result = super().default_get(fields_list)
        vehicles_data = self.env.context.get('default_vehicles_data', [])
        
        # S'assurer que les donn√©es sont au format JSON
        if isinstance(vehicles_data, list):
            result['vehicles_data'] = json.dumps(vehicles_data)
        else:
            result['vehicles_data'] = vehicles_data
            
        _logger.info(f"VRP Map View created with {len(vehicles_data) if isinstance(vehicles_data, list) else 'unknown'} vehicles")
        return result
    

    """

## üìù Explication ligne par ligne

### 1. `from odoo import models, fields, api`

* **`odoo`** : c‚Äôest le framework ERP (Enterprise Resource Planning) sur lequel ce module est construit.
* **`models`** : permet de cr√©er des classes qui repr√©sentent des mod√®les de donn√©es (√©quivalent de tables dans une base de donn√©es).
* **`fields`** : sert √† d√©finir des **champs** (colonnes de la base de donn√©es).
  Exemple : `fields.Text('Vehicles Data')` ‚Üí un champ texte pour stocker des donn√©es.
* **`api`** : contient des d√©corateurs comme `@api.model`, `@api.multi`, `@api.depends` qui d√©finissent le comportement des m√©thodes.

---

### 2. `import json`

* **`json`** : c‚Äôest une librairie Python standard qui permet de **convertir** entre :

  * un objet Python (liste, dictionnaire, etc.)
  * une cha√Æne de caract√®res au format JSON (utilis√© pour √©changer des donn√©es entre programmes).

Exemple :

```python
import json
data = {"nom": "Ali", "age": 25}
texte = json.dumps(data)   # Convertit en string JSON
print(texte)   # {"nom": "Ali", "age": 25}
```

---

### 3. `class VRPMapView(models.TransientModel):`

* **`TransientModel`** : mod√®le temporaire dans Odoo.
  Contrairement √† `models.Model` (qui stocke en base de donn√©es de mani√®re permanente), `TransientModel` est utilis√© pour des donn√©es temporaires (souvent dans des assistants/wizards).

---

### 4. `vehicles_data = fields.Text('Vehicles Data')`

* D√©finition d‚Äôun champ `vehicles_data` de type texte.
* `'Vehicles Data'` est juste le **libell√©** qui appara√Ætra dans l‚Äôinterface.

---

### 5. `@api.model`

* **D√©corateur** qui indique que la m√©thode ne d√©pend pas d‚Äôun enregistrement particulier.
* En gros, c‚Äôest une m√©thode **de classe** qui agit au niveau global.

---

### 6. `def default_get(self, fields_list):`

* **`default_get`** : m√©thode sp√©ciale d‚ÄôOdoo appel√©e lorsqu‚Äôon ouvre un formulaire pour **pr√©-remplir les champs par d√©faut**.
* **`fields_list`** : liste des champs √† initialiser (envoy√©e automatiquement par Odoo).

---

### 7. `result = super().default_get(fields_list)`

* **`super()`** : permet d‚Äôappeler la version **parente** de la m√©thode.
  Ici, √ßa appelle `default_get` d√©fini dans `models.TransientModel`.
* Comme √ßa, tu gardes le comportement de base d‚ÄôOdoo, et tu peux ajouter ton propre traitement **par-dessus**.

---

### 8. `vehicles_data = self.env.context.get('default_vehicles_data', [])`

* **`self.env`** : environnement d‚Äôex√©cution dans Odoo, qui contient :

  * `self.env.user` ‚Üí l‚Äôutilisateur connect√©
  * `self.env.company` ‚Üí la soci√©t√© courante
  * `self.env.context` ‚Üí le contexte courant
* **`context`** : c‚Äôest un dictionnaire (cl√© ‚Üí valeur) qui transporte des informations temporaires entre les m√©thodes.
* **`.get('default_vehicles_data', [])`** :

  * `.get(cl√©, valeur_par_d√©faut)` ‚Üí permet de r√©cup√©rer une valeur depuis le dictionnaire.
  * Ici, on cherche la cl√© `'default_vehicles_data'`.
  * Si elle n‚Äôexiste pas, on retourne `[]` (une liste vide).

üëâ √áa permet donc de r√©cup√©rer la liste des v√©hicules pass√©e par le contexte, ou sinon mettre une liste vide par d√©faut.

---

### 9. `result['vehicles_data'] = json.dumps(vehicles_data)`

* `json.dumps(objet_python)` ‚Üí convertit un objet Python (ici une liste `vehicles_data`) en **cha√Æne JSON**.
* Pourquoi ? Parce que `vehicles_data` est un champ **Texte** dans Odoo, et il ne peut stocker que du texte (string), pas une liste Python directement.

Exemple :

```python
vehicles_data = [{"id": 1, "name": "Camion A"}, {"id": 2, "name": "Camion B"}]
json.dumps(vehicles_data)
# R√©sultat: '[{"id": 1, "name": "Camion A"}, {"id": 2, "name": "Camion B"}]'
```

"""